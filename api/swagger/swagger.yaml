swagger: '2.0'

info:
  version: "0.0.1"
  title: BugTracktor
  description: A flexible bug tracker.
  contact:
    name: Alex Isaienko
    email: thesonerik@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

host: localhost:10010
basePath: /v1
schemes:
  - http

consumes:
  - application/json
produces:
  - application/json


## Security
securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header

security:
  - api_key: []

## Cross-request parameters

parameters:
  projectIdParam:
    in: path
    name: projectId
    description: ID of the project to operate with.
    required: true
    type: integer
    format: int64
  issueIdParam:
    in: path
    name: issueId
    description: ID of the issue to operate with.
    required: true
    type: integer
    format: int64
  issueTypeIdParam:
    in: path
    name: issueTypeId
    description: ID of the issue type to operate with.
    required: true
    type: integer
    format: int64
  issueIndexParam:
    in: path
    name: issueIndex
    description: Index of the issue to operate with.
    required: true
    type: integer
    format: int64
  fromDateQueryParam:
    in: query
    name: fromDate
    description: Minimum date of the returned items.
    required: false
    type: string
    format: date
  toDateQueryParam:
    in: query
    name: toDate
    description: Maximum date of the returned items.
    required: false
    type: string
    format: date
  limitQueryParam:
    in: query
    name: limit
    description: Max size of the returned array.
    required: false
    type: integer
    format: int32


## Requests

paths:
  /register:
    x-swagger-router-controller: users
    post:
      operationId: newUser
      description: Creates a new user.
      security: []
      parameters:
        - in: body
          name: user
          description: The user to create.
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
  /get_token:
    x-swagger-router-controller: users
    get:
      operationId: getToken
      description: Returns an access token for a user.
      security: []
      parameters:
        - in: header
          name: email
          description: User's email.
          required: true
          type: string
          format: email
        - in: header
          name: password
          description: User's password.
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Token"
  /projects:
    x-swagger-router-controller: projects
    get:
      operationId: listProjects
      description: |
        Gets all projects available for a user.
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Project"
    post:
      operationId: createProject
      description: |
        Creates a new project.
      parameters:
        - in: body
          name: project
          description: The project to create.
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Project"
  /projects/{projectId}:
    x-swagger-router-controller: projects
    parameters:
      - $ref: "#/parameters/projectIdParam"
    get:
      operationId: getProject
      description: |
        Gets a project with a given identifier.
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Project"
    patch:
      operationId: updateProject
      description: |
        Updates a project with a new data.
      parameters:
        - in: body
          name: project
          description: The updated project.
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Project"
    delete:
      operationId: deleteProject
      description: |
        Deletes a project.
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Success"
  /projects/{projectId}/issues:
    x-swagger-router-controller: issues
    parameters:
      - $ref: "#/parameters/projectIdParam"
    get:
      operationId: listIssues
      description: |
        Gets a list of issues for a given project.
      parameters:
        - $ref: "#/parameters/limitQueryParam"
        - $ref: "#/parameters/fromDateQueryParam"
        - $ref: "#/parameters/toDateQueryParam"
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Issue"
    post:
      operationId: createIssue
      description: |
        Creates a new issue.
      parameters:
        - in: body
          name: issue
          description: The issue to create.
          required: true
          schema:
            $ref: '#/definitions/Issue'
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Issue"
  /projects/{projectId}/issues/{issueIndex}:
    x-swagger-router-controller: issues
    parameters:
      - $ref: "#/parameters/projectIdParam"
      - $ref: "#/parameters/issueIndexParam"
    get:
      operationId: getIssue
      description: |
        Gets an issue with a given identifier.
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Issue"
    patch:
      operationId: updateIssue
      description: |
        Updates an issue with a new data (should produce a new IssueChange).
      parameters:
        - in: body
          name: issue
          description: The updated issue.
          required: true
          schema:
            $ref: "#/definitions/Issue"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Issue"
  /projects/{projectId}/issues/{issueIndex}/changes:
    x-swagger-router-controller: issues
    parameters:
      - $ref: "#/parameters/projectIdParam"
      - $ref: "#/parameters/issueIndexParam"
      - $ref: "#/parameters/limitQueryParam"
      - $ref: "#/parameters/fromDateQueryParam"
      - $ref: "#/parameters/toDateQueryParam"
    get:
      operationId: getIssueChanges
      description: |
        Gets changes of the given issue.
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/IssueChange"
  /projects/{projectId}/issueTypes:
    x-swagger-router-controller: issue_types
    parameters:
      - $ref: "#/parameters/projectIdParam"
    get:
      operationId: listIssueTypes
      description: |
        Gets a list of issue types for a given project.
      parameters:
        - $ref: "#/parameters/limitQueryParam"
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/IssueType"
    post:
      operationId: createIssueType
      description: |
        Creates a new issue type.
      parameters:
        - in: body
          name: issueType
          description: The issue to create.
          required: true
          schema:
            $ref: '#/definitions/IssueType'
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/IssueType"
  /projects/{projectId}/issueTypes/{issueTypeId}:
    x-swagger-router-controller: issue_types
    parameters:
      - $ref: "#/parameters/projectIdParam"
      - $ref: "#/parameters/issueTypeIdParam"
    get:
      operationId: getIssueType
      description: Gets an issue types with a given id for a given project.
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/IssueType"
    patch:
      operationId: updateIssueType
      description: Updates an issue type.
      parameters:
        - in: body
          name: issueType
          description: The issue to create.
          required: true
          schema:
            $ref: '#/definitions/IssueType'
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/IssueType"

## Data classes

definitions:
  Issue:
    type: object
    properties:
      id:
        type: integer
        description: Unique issue identifier.
      issue_index:
        type: integer
        description: Index of the issue inside the project.
      project:
        $ref: "#/definitions/Project"
      type:
        $ref: "#/definitions/IssueType"
      history:
        type: array
        items:
          $ref: "#/definitions/IssueChange"
      short_description:
        type: string
        description: Short description of the issue.
      full_description:
        type: string
        description: Full description of the issue.
      creation_date:
        type: string
        format: date
        description: Date when issue was created.
  Project:
    type: object
    properties:
      id:
        type: integer
        description: Unique project identifier.
      name:
        type: string
        description: Project name.
      short_description:
        type: string
        description: Short description of the project.
      full_description:
        type: string
        description: Full description of the project.
      members:
        type: array
        items:
          $ref: "#/definitions/ProjectMember"
      issues:
        type: array
        items:
          $ref: "#/definitions/Issue"
  User:
    type: object
    properties:
      id:
        type: integer
        description: Unique user identifier.
      email:
        type: string
        format: email
        description: User's email.
      password:
        type: string
        description: User's password.
      nickname:
        type: string
        format: nickname
        description: User's nickname.
      real_name:
        type: string
        description: User's real name.
    required: ["email", "password"]
  IssueType:
    type: object
    properties:
      id:
        type: integer
        description: Unique issue type identifier.
      name:
        type: string
        description: Issue type name.
      description:
        type: string
        description: Issue type description.
  IssueChange:
    type: object
    properties:
      issue_id:
        type: integer
      author_id:
        type: integer
      date:
        type: string
        format: dateTime
      change:
        type: string
        format: json
  Role:
    type: object
    properties:
      id:
        type: integer
        description: Unique role identifier.
      name:
        type: string
        description: Role name.
      description:
        type: string
        description: Role description.
      permissions:
        type: array
        items:
          $ref: "#/definitions/Permission"
  Permission:
    type: object
    properties:
      name:
        type: string
        description: Unique permission name.
      description:
        type: string
        description: Permission description.
  ProjectMember:
    type: object
    properties:
      user:
        $ref: "#/definitions/User"
        description: User entity that is attached to the project as it's member.
      project:
        $ref: "#/definitions/Project"
      roles:
        type: array
        items:
          $ref: '#/definitions/Role'
      join_date:
        type: string
        format: date
      exit_date:
        type: string
        format: date
  Success:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
        description: User's temporary access token.
      # valid_until:
      #   type: string
      #   format: date-time
      #   description: Date when this token will become invalid.
    required: ["token"]